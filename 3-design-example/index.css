/* We can define our own CSS variables. This is common for defining color themes. */
:root {
  --pink: #ff7b7b;
  --pink-dark: #c73f3f;
}

/* Seek to use a readable font for most of your text. Check out https://fonts.google.com/ */
body {
  font-family: 'Roboto';
}

/* Dosis is more of a "display" font for headings. Check out https://fonts.google.com/ */
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: 'Dosis';

  /* Here, we're using the --pink color variable using the syntax: `var(--var-name)` */
  color: var(--pink);
}

h1 {
  color: white;
}

header {
  padding: 1rem;
  background: var(--pink);
  color: white;
}

/* Here, I want all immediate children of the header to be inline so that the
h1 and the nav can be next to each other */
header>* {
  display: inline;
}

header>nav {
  /* Float lets an element sit on a particular side of its container "above" the 
  other content. text-align:right doesn't work here because its container only takes 
  up the space needed to fit the text. If we could somehow get the container to take 
  up the "remaining" space to the right of the h1, it would work, but we can't do that 
  without flexbox. TBH I don't really understand how float works because it is a
  bit of an out-dated way to do layouts. Flexbox is so much better here for this 
  exact reason! */
  float: right;

  /* I want the floated element to have the same "line-height" as the h1 element so that
  it can be vertically centered. This is SO much easier with Flexbox... */
  line-height: 2.5;
}

nav>a {
  /* remove the underline */
  text-decoration: none;

  /* Box model stuff!*/
  margin-left: .5rem;
  border: 1px solid var(--pink-dark);
  border-radius: 5px;
  padding: .5rem .25rem;

  color: white;
}

/* A "visited" link is one that has been clicked before */
nav>a:visited {
  color: white;
}

/* A slight changes to the color when hovering */
nav>a:hover {
  background: var(--pink-dark);
}

main {
  /* This will keep */
  padding: 1rem;

  text-align: center;
}

/* I want all immediate children of the main area to have margin below them */
main>* {
  /* We can specify margin to be applied to only one side! */
  margin-bottom: 1rem;
}

#movie-data-container>* {
  /* margin-block is basically margin-top and margin-bottom combined */
  margin-block: 1rem;
}

/*  But I don't want the margin for the first and last children. Once again, with Flexbox
this is WAY easier. */
#movie-data-container>*:first-child {
  margin-top: 0;
}

#movie-data-container>*:last-child {
  margin-bottom: 0;
}

/* Same idea as above */
ul#genre-count-list>* {
  margin-bottom: .25rem;
}

ul#genre-count-list>*:last-child {
  margin-bottom: 0;
}

#movies-list>li {
  /* let the movies be next to each other and be affected by width */
  display: inline-block;

  /* Box Model stuff! */
  max-width: 250px;
  padding: 1rem;
  border: 2px solid var(--pink);
  border-radius: 10px;
  margin: 1rem;

  /* hard-coding the height like this is not great but without grid or Flexbox, it is
  really challenging to get all children of a container to share the same height */
  height: 450px;

  vertical-align: top;

  /* text-align will be inherited from parent elements so we have to set it back to left */
  text-align: left;
}

h3 {
  margin-block: .5rem;
}